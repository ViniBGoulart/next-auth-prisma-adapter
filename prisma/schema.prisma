generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  events        UsersOnEvents[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Event {
  id             String          @id @default(cuid())
  name           String
  description    String
  slug           String          @unique
  label          String
  published      Boolean
  date           String
  start          String
  end            String
  listHour       String
  classification Int
  value          Int
  singers        String
  place          String
  users          UsersOnEvents[]

  @@map(name: "events")
}

model UsersOnEvents {
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  @@id([userId, eventId])
}
